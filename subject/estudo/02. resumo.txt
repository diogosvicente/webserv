Projeto Webserv da École 42: Implementação de um Servidor HTTPCapítulo I: IntroduçãoHTTP (Hypertext Transfer Protocol) é um protocolo de aplicação usado para sistemas de informação distribuídos e colaborativos na Web. Ele permite a comunicação entre cliente (geralmente um navegador web) e servidor para a transferência de hipertexto, que pode incluir links para outros recursos.Capítulo II: Regras Gerais1. Robustez do Programa: O servidor HTTP deve ser robusto, não devendo falhar ou sair inesperadamente, mesmo em condições de falta de memória.2. Makefile: É necessário fornecer um Makefile que compile os arquivos fonte sem relinkar. As regras obrigatórias incluem:$(NAME), all, clean, fclean, re3. Padrões de Código:Código em C++ 98, com uso preferencial de funcionalidades modernas do C++.Uso proibido de bibliotecas externas e Boost.4. Compilação: Usar os flags -Wall -Wextra -Werror para compilação.Capítulo III: Parte Obrigatória1. Requisitos Gerais:* O servidor deve aceitar um arquivo de configuração como argumento.* Não é permitido usar execve para outro servidor web.* O servidor deve ser não bloqueante e usar apenas uma chamada a poll() (ou equivalente) para todas as operações de I/O.* Verificar leitura e escrita ao mesmo tempo com poll() (ou equivalente).* A leitura/escrita de arquivos não deve usar poll() (ou equivalente) para não bloquear.Uso de macros como FD_SET, FD_CLR, FD_ISSET, FD_ZERO.* O servidor deve ser compatível com navegadores web comuns.* Status codes de resposta HTTP devem ser precisos.* Páginas de erro padrão devem estar disponíveis.* Capacidade de servir um site totalmente estático.* Clientes devem poder fazer upload de arquivos.* Suporte aos métodos HTTP: GET, POST, DELETE.* Capacidade de escutar múltiplas portas conforme definido no arquivo de configuração.2. Arquivo de Configuração:* Definir porta e host para cada servidor.* Configurar server_names.* Configurar páginas de erro padrão.* Limitar o tamanho do corpo da requisição do cliente.* Configurar rotas com regras específicas, incluindo métodos HTTP aceitos, redirecionamentos, diretórios ou arquivos para busca de conteúdo, listagem de diretórios, arquivos padrão para respostas, execução de CGI com base em extensões de arquivos, suporte a uploads.3. Execução de CGI:* O servidor deve ser capaz de executar CGI com suporte a extensões como PHP.* Descompactar requisições chunked e manipular saídas sem content_length usando EOF.Capítulo IV: Parte Bônus1. Recursos Adicionais:* Suporte a cookies e gerenciamento de sessões.* Manipulação de múltiplos CGI.Implementação em C++ 98Para implementar um servidor HTTP não bloqueante em C++ 98, aqui estão os passos gerais:1. Inicialização do Servidor:* Configurar o servidor conforme o arquivo de configuração.* Inicializar os sockets para escutar nas portas especificadas.2. Gerenciamento de Conexões:* Usar poll() (ou select(), epoll(), kqueue()) para monitorar múltiplas conexões.* Configurar os sockets como não bloqueantes.3. Processamento de Requisições:* Quando um evento de leitura ou escrita é detectado, processar a requisição HTTP.* Manipular métodos GET, POST, DELETE conforme a rota configurada.4. Servir Conteúdo:* Ler arquivos do sistema conforme a rota configurada.* Implementar diretórios listáveis e arquivos padrão.5. Execução de CGI:* Invocar scripts CGI conforme as extensões de arquivo configuradas.* Gerenciar entrada e saída de dados para CGI de forma não bloqueante.6. Respostas HTTP:* Construir respostas HTTP válidas com cabeçalhos apropriados e códigos de status.* Incluir páginas de erro padrão quando necessário.ConclusãoO projeto Webserv da École 42 é um excelente exercício para aprofundar o conhecimento sobre o funcionamento de servidores HTTP e protocolos de rede. Implementar um servidor não bloqueante em C++ 98 utilizando técnicas modernas de gerenciamento de conexões e I/O oferece uma base sólida para o desenvolvimento de sistemas de alta performance e escalabilidade na web.